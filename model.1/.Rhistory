This is an R Markdown presentation. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
library(devtools)
install.packages(devtools)
install.packages("devtools")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
shiny::runApp('CourseraDataProductsAssignment3/WeatherTrendsSwitzerland')
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
?dfm
library(quanteda)
?dfm
c <- readRDS(file="~/corpus.rds")
dfm <- dfm(c, stem=FALSE, tolower=TRUE, removeNumbers=TRUE, removePunct=TRUE, removeSymbols=TRUE, removeTwitter=TRUE, removeURL=TRUE, ngrams=1, skip=0)
install.packages("Matrix")
install.packages("quanteda")
install.packages("Matrix")
install.packages("quanteda")
library(Matrix)
library(quanteda)
library(readtext)
library(Matrix)
dfm <- dfm(c, stem=FALSE, tolower=TRUE, removeNumbers=TRUE, removePunct=TRUE, removeSymbols=TRUE, removeTwitter=TRUE, removeURL=TRUE, ngrams=1, skip=0)
library(Matrix)
library(quanteda)
library(readtext)
library(quanteda)
install.packages("Matrix")
install.packages("quanteda")
library(Matrix)
library(quanteda)
dfm <- dfm(c, stem=FALSE, tolower=TRUE, removeNumbers=TRUE, removePunct=TRUE, removeSymbols=TRUE, removeTwitter=TRUE, removeURL=TRUE, ngrams=1, skip=0)
dfm
topfeatures(dfm, 50)
?dfm
?dfm
presCTTR <- lexdiv(dfm, "CTTR")
dotchart(presCTTR, pch = 16, xlab = "CTTR Lexical Diversity")
textstat_lexdiv(dfm, "CTTR")
dotchart(textstat_lexdiv(dfm, "CTTR"), pch = 16, xlab = "CTTR Lexical Diversity")
barchart(textstat_lexdiv(dfm, "CTTR"), pch = 16, xlab = "CTTR Lexical Diversity")
hist(topfeatures(dfm, 5))
barplot(topfeatures(dfm, 5))
barplot(topfeatures(dfm, 5), horiz=TRUE)
par(las=2)
barplot(topfeatures(dfm, 5), horiz=TRUE)
barplot(topfeatures(dfm, 50), horiz=TRUE)
barplot(topfeatures(dfm, 30), horiz=TRUE)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, xlab = "CTTR Lexical Diversity")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "CTTR Lexical Diversity")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll's Corrected TTR)")
barplot(textstat_lexdiv(dfm, "U"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll's Corrected TTR)")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll's Corrected TTR)")
barplot(textstat_lexdiv(dfm, "U"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll's Corrected TTR)")
barplot(textstat_lexdiv(dfm, "U"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))")
?dfm
?tokenize
plot(topfeatures(dfm, 100), log = "y", cex = .6, ylab = "Term frequency")
barplot(topfeatures(dfm, 30), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), horiz=TRUE)
dfm <- dfm(c, stem=FALSE, tolower=TRUE, removeNumbers=TRUE, removePunct=TRUE, removeSymbols=TRUE, removeHyphens=FALSE, removeTwitter=TRUE, removeURL=TRUE, ngrams=1, skip=0)
stopwords("english")
dfm
summary(dfm)
plot(dfm)
plot(topfeatures(dfm, 30))
textplot_scale1d(dfm)
textplot_wordcloud(dfm, max.words=50)
textplot_wordcloud(dfm, max.words=150, colors="Set1")
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal("Set1"))
library(RColorBrewer)
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal("Set1"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 12, "Set3"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 9, "Blues"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 4, "Blues"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 12, "Blues"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 8, "Dark2"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 8, "Set2"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 9, "Set1"))
getNgram <- function(...) {
dfm <- dfm(c, stem=FALSE, tolower=TRUE, removeNumbers=TRUE, removePunct=TRUE, removeSymbols=TRUE, removeHyphens=FALSE, removeTwitter=TRUE, removeURL=TRUE, ngrams=1, skip=0, ...)
}
getNgram
getNgram()
textplot_wordcloud(dfm, max.words=200, colors=brewer.pal(n = 9, "Set1"))
textplot_wordcloud(dfm, max.words=200, colors=brewer.pal(n = 9, "Set1"), ordered_colors=FALSE)
textplot_wordcloud(dfm, max.words=200, colors=brewer.pal(n = 9, "Set1"), ordered.colors=FALSE)
plot(topfeatures(dfm, 100), log = "y", cex = .6, ylab = "Term frequency")
barplot(rev(topfeatures(dfm, 30)), horiz=TRUE)
par(las=2)
barplot(rev(topfeatures(dfm, 30)), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), horiz=TRUE)
par(las=2)
barplot(rev(topfeatures(dfm, 30)), horiz=TRUE)
par(las=2)
barplot(rev(topfeatures(dfm, 30)), col=heat.colors(), horiz=TRUE)
par(las=2)
barplot(rev(topfeatures(dfm, 30)), col=heat.colors(), horiz=TRUE)
rep(c("red","blue"), 15)
barplot(rev(topfeatures(dfm, 30)), col=heat.colors(), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("red","blue"), 15), horiz=TRUE)
brewer.pal(n = 9, "Set1")
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C" "#377EB8"), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C","#377EB8"), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 2, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 1, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 1, "Spectral")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 1, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 4, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 0, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 2, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 5, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 6, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9$, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9, "Dark1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9, "Dark")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9, "Dark2")), 15), horiz=TRUE)
textplot_wordcloud(dfm, max.words=200, colors=brewer.pal(n = 9, "Set1"))
textplot_wordcloud(dfm, max.words=200, colors=rev(brewer.pal(n = 9, "Set1")))
barplot(rev(topfeatures(dfm, 30)), col=rep(c(rev(brewer.pal(n = 9, "Set1"))), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C" "#377EB8"), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C","#377EB8"), 15), horiz=TRUE)
topfeatures(dfm, 30)
topfeatures(dfm, 30, decreasing=true)
topfeatures(dfm, 30, decreasing=TRUE)
topfeatures(dfm, 1000, decreasing=TRUE)
head(rev(top))
head(rev(topfeatures(dfm, 30000)))
head(rev(topfeatures(dfm, 300000)))
head(rev(topfeatures(dfm, 3000000)))
head(rev(topfeatures(dfm, 3000000)))[1]
head(rev(topfeatures(dfm, 3000000)))[,1]
colnames(head(rev(topfeatures(dfm, 3000000))))
str(head(rev(topfeatures(dfm, 3000000))))
str(head(rev(topfeatures(dfm, 3000000)))$names)
attr(head(rev(topfeatures(dfm, 3000000))), "names")
attr(head(rev(topfeatures(dfm, 3000000)), 10), "names")
attr(head(rev(topfeatures(dfm, 30000)), 10), "names")
attr(head(rev(topfeatures(dfm, 30000)), 20), "names")
attr(head(rev(topfeatures(dfm, 30000)), 30), "names")
attr(head(rev(topfeatures(dfm, 3000000)), 30), "names")
attr(head(rev(topfeatures(dfm, 30000000)), 30), "names")
attr(head(rev(topfeatures(dfm, 1000000)), 30), "names")
attr(head(rev(topfeatures(dfm, 100000)), 30), "names")
attr(head(rev(topfeatures(dfm, 200000)), 30), "names")
attr(head(rev(topfeatures(dfm, 300000)), 30), "names")
attr(head(rev(topfeatures(dfm, 100000)), 30), "names")
sample(attr(topfeatures(dfm, 100000), "names"), 20)
sample(attr(topfeatures(dfm, 100000), "names"), 50)
sample(attr(topfeatures(dfm, 100000), "names"), 100)
sample(attr(topfeatures(dfm, 100000), "names"), 50)
sample(attr(topfeatures(dfm, 100000), "names"), 100)
sample(attr(topfeatures(dfm, 100000), "names"), 96)
set.seed(12345)
sample(attr(topfeatures(dfm, 100000), "names"), 96)
set.seed(12345)
sample(attr(topfeatures(dfm, 100000), "names"), 96)
set.seed(1234)
sample(attr(topfeatures(dfm, 100000), "names"), 96)
sample(attr(topfeatures(dfm, 100000), "names"), 100)
set.seed(1234)
sample(attr(topfeatures(dfm, 100000), "names"), 100)
set.seed(123)
sample(attr(topfeatures(dfm, 100000), "names"), 100)
colors=brewer.pal(n = 9, "Set1")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))")
par(las=2)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#377EB8"))
brewer.pal(n = 9, "Set1")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#984EA3"))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, mgp=c(0,3,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, mgp=c(3,3,3))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, mgp=c(3,1,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, mgp=c(3,2,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=1)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=2)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=.5)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=.8)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=.8,  mgp=c(3,1,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=1, cex.axis=.8,  mgp=c(3,1,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=3, cex.axis=.8,  mgp=c(3,1,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=.8)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C","#377EB8"), 15), horiz=TRUE)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=.8)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C","#377EB8"), 15), horiz=TRUE)
par(las=2, cex.axis=.7)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C","#377EB8"), 15), horiz=TRUE)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
model <- list()
pred2 <- readRDS(file=paste(dataDir, "predictor.2.rds", sep="/"))
setwd("E:/git/CourseraDataScienceCapstone/model.1")
setwd("E:/git/CourseraDataScienceCapstone/model.1")
pred2 <- readRDS(file=paste(dataDir, "predictor.2.rds", sep="/"))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
pred2 <- readRDS(file=paste(".", "predictor.2.rds", sep="/"))
pred1 <- readRDS(file=paste(".", "predictor.1.rds", sep="/"))
pred1 <- sample(pred1, 5313)
pred2 <- sample(pred2, 478056)
system.time(filterModel(pred2, pred1))
install.packages('doParallel')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
values
model
model[[i]]
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
backoffValues <- backoff[removeFirstTerm(name)]
backoff[removeFirstTerm(name)][[1]]
backoff[removeFirstTerm(name)]
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
getDoParWorkers()
?foreach
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
length(model)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
backoffValues > k
k
backoffValues
backoff[removeFirstTerm(name)]
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
backoffValues <- backoff[removeFirstTerm(name)][[1]]
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
values
backoffValues
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
backoffValues
values
backoffValues <- backoff[removeFirstTerm(name)][[1]]
backoffValues
backoffValues > k
backoffDisc[backoffValues]
backoffDisc
discProp
backoff[[discProp]]
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred2, pred1))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
results
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
results
results[!sapply(results, is.null)]
sapply(results, is.null)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
pred1
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
pred1
system.time(filterModel(pred1, list()))
values
backoffValues["and"]
is.na(backoffValues["and"])
is.na(backoffValues["and"]) || backoffValues[name]<5
backoffValues[name]<5
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
backoff
backoff
backoffValues
system.time(filterModel(pred2, pred1))
backoffValues
values
backoffValues
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
results
sapply(results, is.null)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
values
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
values
modelDisc
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
pred2 <- readRDS(file=paste(dataDir, "predictor.2.rds", sep="/"))
dataDir="."
pred2 <- readRDS(file=paste(dataDir, "predictor.2.rds", sep="/"))
pred1 <- readRDS(file=paste(dataDir, "predictor.1.rds", sep="/"))
modelDisc <- model[[discProp]]
backoffDisc <- backoff[[discProp]]
pred1disc <- pred1[[discProp]]
pred2disc <- pred2[[discProp]]
pred1 <- sample(pred1, 53135)
pred1[[discProp]]<-pred1disc
pred2[[discProp]]<-pred2disc
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
dataDir="."
pred2 <- readRDS(file=paste(dataDir, "predictor.2.rds", sep="/"))
pred1 <- readRDS(file=paste(dataDir, "predictor.1.rds", sep="/"))
pred1disc <- pred1[[discProp]]
pred2disc <- pred2[[discProp]]
pred1 <- sample(pred1, 53135)
pred1[[discProp]]<-pred1disc
pred2 <- sample(pred2, 47805)
pred2[[discProp]]<-pred2disc
system.time(filterModel(pred1, list()))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
results
?sapply
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
results
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
names(values)
names(values) <- "test"
names(values)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
values
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
results
list()[[name]]<-value
list()[[name]]<-values
list()[[name]]<-"values"
list()[["name"]]<-"values"
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
retval
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
results
sapply(results, function(x) is.null(x) || length(x)==0)
values of liottle3.427463e-04
3.427463e-04
3.059039e-03
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
3.059039e-03
system.time(filterModel(pred1, list()))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
values<0.001
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
3.059039e-03
system.time(filterModel(pred1, list()))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(filterModel(pred1, list()))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(results<-filterModel(pred1, list()))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
system.time(results<-filterModel(pred1, list()))
results
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
