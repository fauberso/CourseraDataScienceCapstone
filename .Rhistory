library(quanteda)
?dfm
c <- readRDS(file="~/corpus.rds")
dfm <- dfm(c, stem=FALSE, tolower=TRUE, removeNumbers=TRUE, removePunct=TRUE, removeSymbols=TRUE, removeTwitter=TRUE, removeURL=TRUE, ngrams=1, skip=0)
install.packages("Matrix")
install.packages("quanteda")
install.packages("Matrix")
install.packages("quanteda")
library(Matrix)
library(quanteda)
library(readtext)
library(Matrix)
dfm <- dfm(c, stem=FALSE, tolower=TRUE, removeNumbers=TRUE, removePunct=TRUE, removeSymbols=TRUE, removeTwitter=TRUE, removeURL=TRUE, ngrams=1, skip=0)
library(Matrix)
library(quanteda)
library(readtext)
library(quanteda)
install.packages("Matrix")
install.packages("quanteda")
library(Matrix)
library(quanteda)
dfm <- dfm(c, stem=FALSE, tolower=TRUE, removeNumbers=TRUE, removePunct=TRUE, removeSymbols=TRUE, removeTwitter=TRUE, removeURL=TRUE, ngrams=1, skip=0)
dfm
topfeatures(dfm, 50)
?dfm
?dfm
presCTTR <- lexdiv(dfm, "CTTR")
dotchart(presCTTR, pch = 16, xlab = "CTTR Lexical Diversity")
textstat_lexdiv(dfm, "CTTR")
dotchart(textstat_lexdiv(dfm, "CTTR"), pch = 16, xlab = "CTTR Lexical Diversity")
barchart(textstat_lexdiv(dfm, "CTTR"), pch = 16, xlab = "CTTR Lexical Diversity")
hist(topfeatures(dfm, 5))
barplot(topfeatures(dfm, 5))
barplot(topfeatures(dfm, 5), horiz=TRUE)
par(las=2)
barplot(topfeatures(dfm, 5), horiz=TRUE)
barplot(topfeatures(dfm, 50), horiz=TRUE)
barplot(topfeatures(dfm, 30), horiz=TRUE)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, xlab = "CTTR Lexical Diversity")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "CTTR Lexical Diversity")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll's Corrected TTR)")
barplot(textstat_lexdiv(dfm, "U"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll's Corrected TTR)")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll's Corrected TTR)")
barplot(textstat_lexdiv(dfm, "U"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll's Corrected TTR)")
barplot(textstat_lexdiv(dfm, "U"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))")
?dfm
?tokenize
plot(topfeatures(dfm, 100), log = "y", cex = .6, ylab = "Term frequency")
barplot(topfeatures(dfm, 30), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), horiz=TRUE)
dfm <- dfm(c, stem=FALSE, tolower=TRUE, removeNumbers=TRUE, removePunct=TRUE, removeSymbols=TRUE, removeHyphens=FALSE, removeTwitter=TRUE, removeURL=TRUE, ngrams=1, skip=0)
stopwords("english")
dfm
summary(dfm)
plot(dfm)
plot(topfeatures(dfm, 30))
textplot_scale1d(dfm)
textplot_wordcloud(dfm, max.words=50)
textplot_wordcloud(dfm, max.words=150, colors="Set1")
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal("Set1"))
library(RColorBrewer)
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal("Set1"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 12, "Set3"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 9, "Blues"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 4, "Blues"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 12, "Blues"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 8, "Dark2"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 8, "Set2"))
textplot_wordcloud(dfm, max.words=150, colors=brewer.pal(n = 9, "Set1"))
getNgram <- function(...) {
dfm <- dfm(c, stem=FALSE, tolower=TRUE, removeNumbers=TRUE, removePunct=TRUE, removeSymbols=TRUE, removeHyphens=FALSE, removeTwitter=TRUE, removeURL=TRUE, ngrams=1, skip=0, ...)
}
getNgram
getNgram()
textplot_wordcloud(dfm, max.words=200, colors=brewer.pal(n = 9, "Set1"))
textplot_wordcloud(dfm, max.words=200, colors=brewer.pal(n = 9, "Set1"), ordered_colors=FALSE)
textplot_wordcloud(dfm, max.words=200, colors=brewer.pal(n = 9, "Set1"), ordered.colors=FALSE)
plot(topfeatures(dfm, 100), log = "y", cex = .6, ylab = "Term frequency")
barplot(rev(topfeatures(dfm, 30)), horiz=TRUE)
par(las=2)
barplot(rev(topfeatures(dfm, 30)), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), horiz=TRUE)
par(las=2)
barplot(rev(topfeatures(dfm, 30)), horiz=TRUE)
par(las=2)
barplot(rev(topfeatures(dfm, 30)), col=heat.colors(), horiz=TRUE)
par(las=2)
barplot(rev(topfeatures(dfm, 30)), col=heat.colors(), horiz=TRUE)
rep(c("red","blue"), 15)
barplot(rev(topfeatures(dfm, 30)), col=heat.colors(), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("red","blue"), 15), horiz=TRUE)
brewer.pal(n = 9, "Set1")
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C" "#377EB8"), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C","#377EB8"), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 2, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 1, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 1, "Spectral")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 1, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 4, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 0, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 2, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 5, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 6, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9$, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9, "Set1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9, "Dark1")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9, "Dark")), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c(brewer.pal(n = 9, "Dark2")), 15), horiz=TRUE)
textplot_wordcloud(dfm, max.words=200, colors=brewer.pal(n = 9, "Set1"))
textplot_wordcloud(dfm, max.words=200, colors=rev(brewer.pal(n = 9, "Set1")))
barplot(rev(topfeatures(dfm, 30)), col=rep(c(rev(brewer.pal(n = 9, "Set1"))), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C" "#377EB8"), 15), horiz=TRUE)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C","#377EB8"), 15), horiz=TRUE)
topfeatures(dfm, 30)
topfeatures(dfm, 30, decreasing=true)
topfeatures(dfm, 30, decreasing=TRUE)
topfeatures(dfm, 1000, decreasing=TRUE)
head(rev(top))
head(rev(topfeatures(dfm, 30000)))
head(rev(topfeatures(dfm, 300000)))
head(rev(topfeatures(dfm, 3000000)))
head(rev(topfeatures(dfm, 3000000)))[1]
head(rev(topfeatures(dfm, 3000000)))[,1]
colnames(head(rev(topfeatures(dfm, 3000000))))
str(head(rev(topfeatures(dfm, 3000000))))
str(head(rev(topfeatures(dfm, 3000000)))$names)
attr(head(rev(topfeatures(dfm, 3000000))), "names")
attr(head(rev(topfeatures(dfm, 3000000)), 10), "names")
attr(head(rev(topfeatures(dfm, 30000)), 10), "names")
attr(head(rev(topfeatures(dfm, 30000)), 20), "names")
attr(head(rev(topfeatures(dfm, 30000)), 30), "names")
attr(head(rev(topfeatures(dfm, 3000000)), 30), "names")
attr(head(rev(topfeatures(dfm, 30000000)), 30), "names")
attr(head(rev(topfeatures(dfm, 1000000)), 30), "names")
attr(head(rev(topfeatures(dfm, 100000)), 30), "names")
attr(head(rev(topfeatures(dfm, 200000)), 30), "names")
attr(head(rev(topfeatures(dfm, 300000)), 30), "names")
attr(head(rev(topfeatures(dfm, 100000)), 30), "names")
sample(attr(topfeatures(dfm, 100000), "names"), 20)
sample(attr(topfeatures(dfm, 100000), "names"), 50)
sample(attr(topfeatures(dfm, 100000), "names"), 100)
sample(attr(topfeatures(dfm, 100000), "names"), 50)
sample(attr(topfeatures(dfm, 100000), "names"), 100)
sample(attr(topfeatures(dfm, 100000), "names"), 96)
set.seed(12345)
sample(attr(topfeatures(dfm, 100000), "names"), 96)
set.seed(12345)
sample(attr(topfeatures(dfm, 100000), "names"), 96)
set.seed(1234)
sample(attr(topfeatures(dfm, 100000), "names"), 96)
sample(attr(topfeatures(dfm, 100000), "names"), 100)
set.seed(1234)
sample(attr(topfeatures(dfm, 100000), "names"), 100)
set.seed(123)
sample(attr(topfeatures(dfm, 100000), "names"), 100)
colors=brewer.pal(n = 9, "Set1")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))")
par(las=2)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#377EB8"))
brewer.pal(n = 9, "Set1")
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#984EA3"))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, mgp=c(0,3,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, mgp=c(3,3,3))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, mgp=c(3,1,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, mgp=c(3,2,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=1)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=2)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=.5)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=.8)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=.8,  mgp=c(3,1,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=1, cex.axis=.8,  mgp=c(3,1,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=3, cex.axis=.8,  mgp=c(3,1,0))
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=.8)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C","#377EB8"), 15), horiz=TRUE)
barplot(textstat_lexdiv(dfm, "CTTR"), pch = 16, horiz=TRUE, xlab = "Lexical Diversity (Carroll Type-Token Ratio (CTTR))", col=c("#E41A1C","#377EB8","#4DAF4A"))
par(las=2, cex.axis=.8)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C","#377EB8"), 15), horiz=TRUE)
par(las=2, cex.axis=.7)
barplot(rev(topfeatures(dfm, 30)), col=rep(c("#E41A1C","#377EB8"), 15), horiz=TRUE)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
load()
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
load()
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
load()
source('E:/git/CourseraDataScienceCapstone/predict.R')
load(10)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
View(computeResidualProb)
predict("i_am_glad")
source('E:/git/CourseraDataScienceCapstone/predict.R')
predict("i_am_glad")
predict("i am glad")
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
predict("i am glad")
source('E:/git/CourseraDataScienceCapstone/predict.R')
predict("i am glad")
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
predict("i am glad")
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
predict("i am glad")
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
predict("i am glad")
source('E:/git/CourseraDataScienceCapstone/predict.R')
predict("i am glad")
source('E:/git/CourseraDataScienceCapstone/predict.R')
predict("i am glad")
predict("i am gladd")
predict("i am gladdd")
predict("gladd")
predict("am gladd")
predict("gladd")
getSearchTerm("gladd",1)
getSearchTerm("gladd",22)
getSearchTerm("gladd",2)
getSearchTerm("gladd",3)
getSearchTerm("gladd",2)
getSearchTerm("gladd",3)
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
source('E:/git/CourseraDataScienceCapstone/predict.R')
getSearchTerm("gladd",3)
getSearchTerm("gladd",2)
getSearchTerm("gladd",1)
predict("gladd")
source('E:/git/CourseraDataScienceCapstone/predict.R')
predict("gladd")
source('E:/git/CourseraDataScienceCapstone/predict.R')
predict("gladd")
predict("gladdd")
predict("glad")
predict("i am gladd")
predict("gladd")
predict("i am glad")
source('E:/git/CourseraDataScienceCapstone/predict.R')
predict("i am glad")
predict("i am gladd")
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
setwd("E:/git/CourseraDataScienceCapstone/model.1")
model <- readRDS(file="predictor.1.rds")
backoff <- readRDS(file="predictor.2.rds")
backoff <- readRDS(file="predictor.2$.rds")
backoff <- readRDS(file="predictor.2.rds")
model <- readRDS(file="predictor.3.rds")
setwd("E:/git/CourseraDataScienceCapstone")
model[[1]]
names(model[[1]])
names(sapply(model, names))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
grep("_", regexpr("maritime_classroom_for"),
grep("_", regexpr("maritime_classroom_for"),
:
grep("_", "maritime_classroom_for")
regexpr("_", "maritime_classroom_for")
substr("maritime_classroom_for", 0, regexpr("_", term))
substr("maritime_classroom_for", 0, regexpr("_", "maritime_classroom_for"))
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
substr("maritime_classroom_for", 0, regexpr("_", "maritime_classroom_for"))
removeFirstTerm("maritime_classroom_for")
removeFirstTerm("maritime_classroom_for")
term <- maritime_classroom_for
term <- "maritime_classroom_for"
match <- regexpr("_", term)
match+attr(match, "match.length")
attr(match, "match.length")
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
removeFirstTerm("maritime_classroom_for")
size(term)
length(term)
nchar(term)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
removeFirstTerm("maritime_classroom_for")
match <- regexpr("_", term)
nchar(term)-match
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
nchar(term)-match
removeFirstTerm("maritime_classroom_for")
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
removeFirstTerm("maritime_classroom_for")
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
names(backoffValues)
names(backoffValues) %%in%% names(values)
names(backoffValues) %%in names(values)
names(backoffValues) %in names(values)
names(backoffValues) %in% names(values)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
values
unlist(values)
unlist(values, use.names = FALSE)
unlist(backoffValues)
unlist(backoffValues, use.names = FALSE)
backoff[["sadfa"]]
backoff[["sadfa"]][[1]]
values[[1]]
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
backoffValues
backoffValues %in% values
names(backoffValues) %in% names(values)
backoffValues[names(backoffValues) %in% names(values)]
backoffValues[names(backoffValues) %in% names(values)] <- NULL
!(backoffValues[names(backoffValues) %in% names(values)])
backoffValues[- backoffValues[names(backoffValues) %in% names(values)]]
backoffValues[-backoffValues[names(backoffValues) %in% names(values)]]
backoffValues[!backoffValues[names(backoffValues) %in% names(values)]]
backoffValues[!(backoffValues[names(backoffValues) %in% names(values)])]
backoffValues[!((backoffValues[names(backoffValues) %in% names(values)])
)])]
(backoffValues[!(names(backoffValues) %in% names(values))])
backoffValues[!(names(backoffValues) %in% names(values))]
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
backoffValues
backoffValues[!(names(backoffValues) %in% names(values))]
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
backoffValues
values <- ifelse(values > k, values, discounts[values]*values)/total
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
values <- ifelse(values > k, values, values[[discProp]]*values)/total
discProp
model[[discProp]]
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
values
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
1-sum(values)
sum(values)
backoffValues
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
values
backoffValues
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
values
backoffValues
values[values>0.02]
values[values>0.03]
values[values>0.02]
values[values>max(backoffValues)]
values[values>max(backoffValues)]
backoffValues[names(backoffValues)==names(values)]
backoffValues[names(backoffValues)==names(values)]
backoffValues[names(backoffValues)==names(values)]>values
backoffValues[names(backoffValues)==names(values)]<values
backoffValues[names(backoffValues)==names(values)]<values
values[backoffValues[names(backoffValues)==names(values)]<values]
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
values
backoffValues
length(values)
warnings()
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
values
backoffValues
filterModel(model, backoff)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
warnings()
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
values
backoffValues
backoffValues[names(backoffValues)==names(values)]<values
Filter(values, function(x) TRUE)
Filter(values, function(x) {TRUE})
Filter(values, function(x) {return (TRUE)})
Filter(values, function(x) {return (TRUE)})
Filter(values, function(x) {return(TRUE)})
Filter(values, function(x) {})
Filter(values)
Filter()
Filter(function(x) TRUE, values )
Filter(function(x) {TRUE} , values )
Filter(function(x) {backoffValues[names(x)]<x} , values )
Filter(function(x) {backoffValues[names(x)]>x} , values )
Filter(function(x) {backoffValues[names(x)]>x} , values )
names(x[1])
names(values[1])
backoffValues[names(backoffValues)==names(values[1])]
Filter(function(x) {backoffValues[names(backoffValues)==names(x)]>x} , values )
Filter(function(x) {backoffValues[names(backoffValues)==names(x)]<x} , values )
Filter(function(x) {backoffValues[names(backoffValues)==names(x)]==x} , values )
Filter(function(x) {backoffValues[names(backoffValues)==names(x)]>x} , values )
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
names(x)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
backoffValues[names(backoffValues)==names(x)]>x
names(x)
x
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
backoffValues[names(backoffValues)==names]>x
backoffValues[names(backoffValues)==names]
backoffValues[name]
backoffValues[name]
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
values
backoffValues
VALUES
values
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
values
backoffValues
values
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, backoff)
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(model, list())
filterModel(backoff, list())
filterModel(backoff, list())
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(backoff, list())
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
filterModel(backoff, list())
warnings()
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
source('E:/git/CourseraDataScienceCapstone/generateFiles.R')
